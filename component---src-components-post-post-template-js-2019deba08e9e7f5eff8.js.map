{"version":3,"sources":["webpack:///./src/components/MDContainer/MDContainer.js","webpack:///./src/components/Post/Post.js","webpack:///./src/components/Post/PostTemplate.js"],"names":["MDContainer","html","className","dangerouslySetInnerHTML","__html","dateFormatter","Intl","DateTimeFormat","year","month","day","withStyles","theme","container","paddingTop","spacing","paddingBottom","overflowWrap","date","color","palette","grey","title","subtitle","classes","formattedDate","format","Container","maxWidth","component","root","Typography","variant","gutterBottom","PostTemplate","data","markdownRemark","frontmatter","dateObj","moment","toDate","HeadFooter","SEO","type","meta","name","content","toISOString","pageQuery"],"mappings":"0OAiBeA,MAbf,YAAgC,IAATC,EAAQ,EAARA,KACtB,OACC,yBACCC,UAAU,eACVC,wBAAyB,CAAEC,OAAQH,MCWhCI,EAAgB,IAAIC,KAAKC,eAAe,QAAS,CACtDC,KAAM,UAAWC,MAAO,OAAQC,IAAK,YA8BvBC,mBA1CA,SAAAC,GAAK,MAAK,CACxBC,UAAW,CACVC,WAAYF,EAAMG,QAAQ,GAC1BC,cAAeJ,EAAMG,QAAQ,GAC7BE,aAAc,cAEfC,KAAM,CACLC,MAAOP,EAAMQ,QAAQC,KAAK,SAmCbV,EA3Bf,YAAyD,IAAzCW,EAAwC,EAAxCA,MAAOC,EAAiC,EAAjCA,SAAUL,EAAuB,EAAvBA,KAAMjB,EAAiB,EAAjBA,KAAMuB,EAAW,EAAXA,QACtCC,EAAgBpB,EAAcqB,OAAOR,GAE3C,OACC,kBAACS,EAAA,EAAD,CAAWC,SAAS,KAAKC,UAAU,UAAUL,QAAS,CAAEM,KAAMN,EAAQX,YACrE,kBAACkB,EAAA,EAAD,CAAYC,QAAQ,KAAKC,cAAY,EAACJ,UAAU,MAC9CP,GAEF,kBAACS,EAAA,EAAD,CAAYC,QAAQ,KAAKH,UAAU,MACjCN,GAEF,kBAACQ,EAAA,EAAD,CAAYC,QAAQ,QAAQ9B,UAAWsB,EAAQN,MAC7CO,GAEF,kBAAC,EAAD,CAAaxB,KAAMA,Q,wBCWPiC,UAvCf,YAAiC,IAAD,IAARC,KACYC,eAA3BC,EADuB,EACvBA,YAAapC,EADU,EACVA,KACbiB,EAA0BmB,EAA1BnB,KAAMI,EAAoBe,EAApBf,MAAOC,EAAac,EAAbd,SAGfe,EAAUC,IAAOrB,GAAMsB,SAC7B,OACC,kBAACC,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,CACCpB,MAAOA,EACPqB,KAAK,UACLC,KAAM,CACL,CAAEC,KAAM,yBAA0BC,QAASR,EAAQS,eACnD,CAAEF,KAAM,kBAAmBC,QAAS,iBAGtC,kBAAC,EAAD,CACCxB,MAAOA,EACPC,SAAUA,EACVL,KAAMoB,EACNrC,KAAMA,MAmBKiC,IAEFc,EAAS,c","file":"component---src-components-post-post-template-js-2019deba08e9e7f5eff8.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './mdstyle.css';\n\nfunction MDContainer({ html }) {\n\treturn (\n\t\t<div\n\t\t\tclassName=\"md_container\"\n\t\t\tdangerouslySetInnerHTML={{ __html: html }}\n\t\t/>\n\t);\n}\n\nMDContainer.propTypes = {\n\thtml: PropTypes.string.isRequired\n};\n\nexport default MDContainer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\n\nimport MDContainer from '../MDContainer/MDContainer';\n\nconst styles = theme => ({\n\tcontainer: {\n\t\tpaddingTop: theme.spacing(2),\n\t\tpaddingBottom: theme.spacing(2),\n\t\toverflowWrap: 'break-word'\n\t},\n\tdate: {\n\t\tcolor: theme.palette.grey[500]\n\t}\n});\n\nconst dateFormatter = new Intl.DateTimeFormat('en-US', {\n\tyear: 'numeric', month: 'long', day: 'numeric'\n});\n\nfunction Post({ title, subtitle, date, html, classes }) {\n\tconst formattedDate = dateFormatter.format(date);\n\n\treturn (\n\t\t<Container maxWidth=\"md\" component=\"article\" classes={{ root: classes.container }}>\n\t\t\t<Typography variant=\"h2\" gutterBottom component=\"h1\">\n\t\t\t\t{title}\n\t\t\t</Typography>\n\t\t\t<Typography variant=\"h5\" component=\"h3\">\n\t\t\t\t{subtitle}\n\t\t\t</Typography>\n\t\t\t<Typography variant=\"body1\" className={classes.date}>\n\t\t\t\t{formattedDate}\n\t\t\t</Typography>\n\t\t\t<MDContainer html={html} />\n\t\t</Container>\n\t);\n}\n\nPost.propTypes = {\n\ttitle: PropTypes.string.isRequired,\n\tsubtitle: PropTypes.string.isRequired,\n\tdate: PropTypes.instanceOf(Date).isRequired,\n\thtml: PropTypes.string.isRequired,\n\tclasses: PropTypes.object.isRequired\n};\n\nexport default withStyles(styles)(Post);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql } from 'gatsby';\nimport moment from 'moment';\n\nimport Post from './Post';\nimport HeadFooter from '../HeadFooter/HeadFooter';\nimport SEO from '../SEO';\n\nfunction PostTemplate({ data }) {\n\tconst { frontmatter, html } = data.markdownRemark;\n\tconst { date, title, subtitle } = frontmatter;\n\t// The built-in Date constructor that parses a date string does so in UTC,\n\t// which we do not want. Moment, however, parses it in the current timezone.\n\tconst dateObj = moment(date).toDate();\n\treturn (\n\t\t<HeadFooter>\n\t\t\t<SEO\n\t\t\t\ttitle={title}\n\t\t\t\ttype='article'\n\t\t\t\tmeta={[\n\t\t\t\t\t{ name: 'article:published_time', content: dateObj.toISOString() },\n\t\t\t\t\t{ name: 'article:section', content: 'Technology' }\n\t\t\t\t]}\n\t\t\t/>\n\t\t\t<Post\n\t\t\t\ttitle={title}\n\t\t\t\tsubtitle={subtitle}\n\t\t\t\tdate={dateObj}\n\t\t\t\thtml={html}\n\t\t\t/>\n\t\t</HeadFooter>\n\t);\n}\n\nPostTemplate.propTypes = {\n\tdata: PropTypes.exact({\n\t\tmarkdownRemark:\tPropTypes.exact({\n\t\t\thtml: PropTypes.string.isRequired,\n\t\t\tfrontmatter: PropTypes.exact({\n\t\t\t\tdate: PropTypes.string.isRequired,\n\t\t\t\ttitle: PropTypes.string.isRequired,\n\t\t\t\tsubtitle: PropTypes.string.isRequired\n\t\t\t}).isRequired\n\t\t}).isRequired\n\t}).isRequired\n};\n\nexport default PostTemplate;\n\nexport const pageQuery = graphql`\n  query BlogPostByPath($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      frontmatter {\n        date\n\t\t\t\ttitle\n\t\t\t\tsubtitle\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}